// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	antibrut "github.com/romsar/antibrut"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the repository type
type Repository struct {
	mock.Mock
}

// CreateIPRule provides a mock function with given fields: ctx, ipRule
func (_m *Repository) CreateIPRule(ctx context.Context, ipRule *antibrut.IPRule) (*antibrut.IPRule, error) {
	ret := _m.Called(ctx, ipRule)

	var r0 *antibrut.IPRule
	if rf, ok := ret.Get(0).(func(context.Context, *antibrut.IPRule) *antibrut.IPRule); ok {
		r0 = rf(ctx, ipRule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.IPRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *antibrut.IPRule) error); ok {
		r1 = rf(ctx, ipRule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPRules provides a mock function with given fields: ctx, filter
func (_m *Repository) DeleteIPRules(ctx context.Context, filter antibrut.IPRuleFilter) (int64, error) {
	ret := _m.Called(ctx, filter)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.IPRuleFilter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.IPRuleFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindIPRuleBySubnet provides a mock function with given fields: ctx, subnet
func (_m *Repository) FindIPRuleBySubnet(ctx context.Context, subnet antibrut.Subnet) (*antibrut.IPRule, error) {
	ret := _m.Called(ctx, subnet)

	var r0 *antibrut.IPRule
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.Subnet) *antibrut.IPRule); ok {
		r0 = rf(ctx, subnet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.IPRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.Subnet) error); ok {
		r1 = rf(ctx, subnet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindIPRulesByIP provides a mock function with given fields: ctx, ip
func (_m *Repository) FindIPRulesByIP(ctx context.Context, ip antibrut.IP) ([]*antibrut.IPRule, error) {
	ret := _m.Called(ctx, ip)

	var r0 []*antibrut.IPRule
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.IP) []*antibrut.IPRule); ok {
		r0 = rf(ctx, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*antibrut.IPRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.IP) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPRule provides a mock function with given fields: ctx, id, upd
func (_m *Repository) UpdateIPRule(ctx context.Context, id antibrut.IPRuleID, upd *antibrut.IPRuleUpdate) (*antibrut.IPRule, error) {
	ret := _m.Called(ctx, id, upd)

	var r0 *antibrut.IPRule
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.IPRuleID, *antibrut.IPRuleUpdate) *antibrut.IPRule); ok {
		r0 = rf(ctx, id, upd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.IPRule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.IPRuleID, *antibrut.IPRuleUpdate) error); ok {
		r1 = rf(ctx, id, upd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
