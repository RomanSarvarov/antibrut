// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	proto "github.com/romsar/antibrut/proto/antibrut/v1"
	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// AntiBrutServiceServer is an autogenerated mock type for the AntiBrutServiceServer type
type AntiBrutServiceServer struct {
	mock.Mock
}

// AddIPToBlackList provides a mock function with given fields: _a0, _a1
func (_m *AntiBrutServiceServer) AddIPToBlackList(_a0 context.Context, _a1 *proto.AddIPToBlackListRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AddIPToBlackListRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AddIPToBlackListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddIPToWhiteList provides a mock function with given fields: _a0, _a1
func (_m *AntiBrutServiceServer) AddIPToWhiteList(_a0 context.Context, _a1 *proto.AddIPToWhiteListRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AddIPToWhiteListRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AddIPToWhiteListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *AntiBrutServiceServer) Check(_a0 context.Context, _a1 *proto.CheckRequest) (*proto.CheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.CheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CheckRequest) *proto.CheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPFromBlackList provides a mock function with given fields: _a0, _a1
func (_m *AntiBrutServiceServer) DeleteIPFromBlackList(_a0 context.Context, _a1 *proto.DeleteIPFromBlackListRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteIPFromBlackListRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteIPFromBlackListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPFromWhiteList provides a mock function with given fields: _a0, _a1
func (_m *AntiBrutServiceServer) DeleteIPFromWhiteList(_a0 context.Context, _a1 *proto.DeleteIPFromWhiteListRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteIPFromWhiteListRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteIPFromWhiteListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields: _a0, _a1
func (_m *AntiBrutServiceServer) Reset(_a0 context.Context, _a1 *proto.ResetRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ResetRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.ResetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAntiBrutServiceServer provides a mock function with given fields:
func (_m *AntiBrutServiceServer) mustEmbedUnimplementedAntiBrutServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewAntiBrutServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAntiBrutServiceServer creates a new instance of AntiBrutServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAntiBrutServiceServer(t mockConstructorTestingTNewAntiBrutServiceServer) *AntiBrutServiceServer {
	mock := &AntiBrutServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
