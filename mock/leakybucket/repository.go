// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	antibrut "github.com/romsar/antibrut"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateAttempt provides a mock function with given fields: ctx, attempt
func (_m *Repository) CreateAttempt(ctx context.Context, attempt *antibrut.Attempt) (*antibrut.Attempt, error) {
	ret := _m.Called(ctx, attempt)

	var r0 *antibrut.Attempt
	if rf, ok := ret.Get(0).(func(context.Context, *antibrut.Attempt) *antibrut.Attempt); ok {
		r0 = rf(ctx, attempt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.Attempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *antibrut.Attempt) error); ok {
		r1 = rf(ctx, attempt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: ctx, bucket
func (_m *Repository) CreateBucket(ctx context.Context, bucket *antibrut.Bucket) (*antibrut.Bucket, error) {
	ret := _m.Called(ctx, bucket)

	var r0 *antibrut.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, *antibrut.Bucket) *antibrut.Bucket); ok {
		r0 = rf(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *antibrut.Bucket) error); ok {
		r1 = rf(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuckets provides a mock function with given fields: ctx, filter
func (_m *Repository) DeleteBuckets(ctx context.Context, filter antibrut.BucketFilter) (int64, error) {
	ret := _m.Called(ctx, filter)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.BucketFilter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.BucketFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAttempts provides a mock function with given fields: ctx, filter
func (_m *Repository) FindAttempts(ctx context.Context, filter antibrut.AttemptFilter) ([]*antibrut.Attempt, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*antibrut.Attempt
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.AttemptFilter) []*antibrut.Attempt); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*antibrut.Attempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.AttemptFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBucket provides a mock function with given fields: ctx, c, val
func (_m *Repository) FindBucket(ctx context.Context, c antibrut.LimitationCode, val string) (*antibrut.Bucket, error) {
	ret := _m.Called(ctx, c, val)

	var r0 *antibrut.Bucket
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.LimitationCode, string) *antibrut.Bucket); ok {
		r0 = rf(ctx, c, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.LimitationCode, string) error); ok {
		r1 = rf(ctx, c, val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLimitation provides a mock function with given fields: ctx, c
func (_m *Repository) FindLimitation(ctx context.Context, c antibrut.LimitationCode) (*antibrut.Limitation, error) {
	ret := _m.Called(ctx, c)

	var r0 *antibrut.Limitation
	if rf, ok := ret.Get(0).(func(context.Context, antibrut.LimitationCode) *antibrut.Limitation); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antibrut.Limitation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, antibrut.LimitationCode) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
