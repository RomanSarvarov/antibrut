// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: antibrut/v1/antibrut.proto

package antibrut

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBrutServiceClient is the client API for AntiBrutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBrutServiceClient interface {
	Try(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*TryResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToWhiteList(ctx context.Context, in *AddToWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromWhiteList(ctx context.Context, in *DeleteFromWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToBlackList(ctx context.Context, in *AddToBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromBlackList(ctx context.Context, in *DeleteFromBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type antiBrutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBrutServiceClient(cc grpc.ClientConnInterface) AntiBrutServiceClient {
	return &antiBrutServiceClient{cc}
}

func (c *antiBrutServiceClient) Try(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*TryResponse, error) {
	out := new(TryResponse)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/Try", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) AddToWhiteList(ctx context.Context, in *AddToWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) DeleteFromWhiteList(ctx context.Context, in *DeleteFromWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/DeleteFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) AddToBlackList(ctx context.Context, in *AddToBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) DeleteFromBlackList(ctx context.Context, in *DeleteFromBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/DeleteFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBrutServiceServer is the server API for AntiBrutService service.
// All implementations must embed UnimplementedAntiBrutServiceServer
// for forward compatibility
type AntiBrutServiceServer interface {
	Try(context.Context, *TryRequest) (*TryResponse, error)
	Reset(context.Context, *ResetRequest) (*emptypb.Empty, error)
	AddToWhiteList(context.Context, *AddToWhiteListRequest) (*emptypb.Empty, error)
	DeleteFromWhiteList(context.Context, *DeleteFromWhiteListRequest) (*emptypb.Empty, error)
	AddToBlackList(context.Context, *AddToBlackListRequest) (*emptypb.Empty, error)
	DeleteFromBlackList(context.Context, *DeleteFromBlackListRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAntiBrutServiceServer()
}

// UnimplementedAntiBrutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBrutServiceServer struct {
}

func (UnimplementedAntiBrutServiceServer) Try(context.Context, *TryRequest) (*TryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (UnimplementedAntiBrutServiceServer) Reset(context.Context, *ResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedAntiBrutServiceServer) AddToWhiteList(context.Context, *AddToWhiteListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntiBrutServiceServer) DeleteFromWhiteList(context.Context, *DeleteFromWhiteListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhiteList not implemented")
}
func (UnimplementedAntiBrutServiceServer) AddToBlackList(context.Context, *AddToBlackListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntiBrutServiceServer) DeleteFromBlackList(context.Context, *DeleteFromBlackListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlackList not implemented")
}
func (UnimplementedAntiBrutServiceServer) mustEmbedUnimplementedAntiBrutServiceServer() {}

// UnsafeAntiBrutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBrutServiceServer will
// result in compilation errors.
type UnsafeAntiBrutServiceServer interface {
	mustEmbedUnimplementedAntiBrutServiceServer()
}

func RegisterAntiBrutServiceServer(s grpc.ServiceRegistrar, srv AntiBrutServiceServer) {
	s.RegisterService(&AntiBrutService_ServiceDesc, srv)
}

func _AntiBrutService_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/Try",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).Try(ctx, req.(*TryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).AddToWhiteList(ctx, req.(*AddToWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_DeleteFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).DeleteFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/DeleteFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).DeleteFromWhiteList(ctx, req.(*DeleteFromWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).AddToBlackList(ctx, req.(*AddToBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_DeleteFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).DeleteFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/DeleteFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).DeleteFromBlackList(ctx, req.(*DeleteFromBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBrutService_ServiceDesc is the grpc.ServiceDesc for AntiBrutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBrutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antibrut.v1.AntiBrutService",
	HandlerType: (*AntiBrutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _AntiBrutService_Try_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AntiBrutService_Reset_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntiBrutService_AddToWhiteList_Handler,
		},
		{
			MethodName: "DeleteFromWhiteList",
			Handler:    _AntiBrutService_DeleteFromWhiteList_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntiBrutService_AddToBlackList_Handler,
		},
		{
			MethodName: "DeleteFromBlackList",
			Handler:    _AntiBrutService_DeleteFromBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antibrut/v1/antibrut.proto",
}
