// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: antibrut/v1/antibrut.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBrutServiceClient is the client API for AntiBrutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBrutServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddIPToWhiteList(ctx context.Context, in *AddIPToWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteIPFromWhiteList(ctx context.Context, in *DeleteIPFromWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddIPToBlackList(ctx context.Context, in *AddIPToBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteIPFromBlackList(ctx context.Context, in *DeleteIPFromBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type antiBrutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBrutServiceClient(cc grpc.ClientConnInterface) AntiBrutServiceClient {
	return &antiBrutServiceClient{cc}
}

func (c *antiBrutServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) AddIPToWhiteList(ctx context.Context, in *AddIPToWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/AddIPToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) DeleteIPFromWhiteList(ctx context.Context, in *DeleteIPFromWhiteListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/DeleteIPFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) AddIPToBlackList(ctx context.Context, in *AddIPToBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/AddIPToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBrutServiceClient) DeleteIPFromBlackList(ctx context.Context, in *DeleteIPFromBlackListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/antibrut.v1.AntiBrutService/DeleteIPFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBrutServiceServer is the server API for AntiBrutService service.
// All implementations must embed UnimplementedAntiBrutServiceServer
// for forward compatibility
type AntiBrutServiceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Reset(context.Context, *ResetRequest) (*emptypb.Empty, error)
	AddIPToWhiteList(context.Context, *AddIPToWhiteListRequest) (*emptypb.Empty, error)
	DeleteIPFromWhiteList(context.Context, *DeleteIPFromWhiteListRequest) (*emptypb.Empty, error)
	AddIPToBlackList(context.Context, *AddIPToBlackListRequest) (*emptypb.Empty, error)
	DeleteIPFromBlackList(context.Context, *DeleteIPFromBlackListRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAntiBrutServiceServer()
}

// UnimplementedAntiBrutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBrutServiceServer struct {
}

func (UnimplementedAntiBrutServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAntiBrutServiceServer) Reset(context.Context, *ResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedAntiBrutServiceServer) AddIPToWhiteList(context.Context, *AddIPToWhiteListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPToWhiteList not implemented")
}
func (UnimplementedAntiBrutServiceServer) DeleteIPFromWhiteList(context.Context, *DeleteIPFromWhiteListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPFromWhiteList not implemented")
}
func (UnimplementedAntiBrutServiceServer) AddIPToBlackList(context.Context, *AddIPToBlackListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPToBlackList not implemented")
}
func (UnimplementedAntiBrutServiceServer) DeleteIPFromBlackList(context.Context, *DeleteIPFromBlackListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPFromBlackList not implemented")
}
func (UnimplementedAntiBrutServiceServer) mustEmbedUnimplementedAntiBrutServiceServer() {}

// UnsafeAntiBrutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBrutServiceServer will
// result in compilation errors.
type UnsafeAntiBrutServiceServer interface {
	mustEmbedUnimplementedAntiBrutServiceServer()
}

func RegisterAntiBrutServiceServer(s grpc.ServiceRegistrar, srv AntiBrutServiceServer) {
	s.RegisterService(&AntiBrutService_ServiceDesc, srv)
}

func _AntiBrutService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_AddIPToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPToWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).AddIPToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/AddIPToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).AddIPToWhiteList(ctx, req.(*AddIPToWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_DeleteIPFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPFromWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).DeleteIPFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/DeleteIPFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).DeleteIPFromWhiteList(ctx, req.(*DeleteIPFromWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_AddIPToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPToBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).AddIPToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/AddIPToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).AddIPToBlackList(ctx, req.(*AddIPToBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBrutService_DeleteIPFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPFromBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBrutServiceServer).DeleteIPFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibrut.v1.AntiBrutService/DeleteIPFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBrutServiceServer).DeleteIPFromBlackList(ctx, req.(*DeleteIPFromBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBrutService_ServiceDesc is the grpc.ServiceDesc for AntiBrutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBrutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antibrut.v1.AntiBrutService",
	HandlerType: (*AntiBrutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _AntiBrutService_Check_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AntiBrutService_Reset_Handler,
		},
		{
			MethodName: "AddIPToWhiteList",
			Handler:    _AntiBrutService_AddIPToWhiteList_Handler,
		},
		{
			MethodName: "DeleteIPFromWhiteList",
			Handler:    _AntiBrutService_DeleteIPFromWhiteList_Handler,
		},
		{
			MethodName: "AddIPToBlackList",
			Handler:    _AntiBrutService_AddIPToBlackList_Handler,
		},
		{
			MethodName: "DeleteIPFromBlackList",
			Handler:    _AntiBrutService_DeleteIPFromBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antibrut/v1/antibrut.proto",
}
